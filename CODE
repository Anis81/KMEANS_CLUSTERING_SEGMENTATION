%% THIS PROGRAM CONTAINS K MEANS CLUSTERING SEGMENTATION, MANUAL SEGMENTATION AND DICE SIMILARITY COEFFICIENT
%% 1. K MEANS CLUSTERING SEGMENTATION
%     STEP:
%     - SELECT THE IMAGE FROM YOUR FOLDER
%     - CROPPING = CLICK ON EPICARDIAL TO CREATE A SQUARE, MAKE SURE THE SQUARE COINCIDE 
%       AND NOT CUT EPICARDIAL 
%     - DOUBLE-CLICK ON ENDOCARDIAL TO GET SUM OF PIXEL
clc;
clear all;
close all;
% SELECT IMAGE
[filename, pathname] = uigetfile;
load (fullfile(pathname, filename));
figure, imshow (pic,[]); 
title ('K MEANS CLUSTERING SEGMENTATION IMAGE')
% CROPPING
[x1,y1] = getline(); % make a point
[y2, x2] = meshgrid(1:size(pic,1), 1:size(pic,2)); % getting image's coordinate before processing
crop = inpolygon(x2, y2, x1, y1); % crop's coordinate = image's coordinate before processing
crop=crop'; %transpose crop
hold on;
plot(x1,y1,'r');

% find crop's coordinate

[y3,x3] = find(crop==1); % outcome crop's coordinate = 1

for j = 1:length(x3)
    signal_crop(1,j) = pic(y3(j),x3(j));
end
image_crop=zeros(size(pic)); % size blank image = image before processing
for j=1:length(x3)
    image_crop(y3(j),x3(j))=signal_crop(j);
end

figure;imshow(image_crop,[]); %show the image croped
title ('SELECTED IMAGE')
% PROCESSING K MEANS CLUSTERING

k=3; % sum of cluster
max_iter=25; % maksimum iterasi
data = double(image_crop(:)); % change image's dimension  to one dimensional
min_pix = min(data); 
max_pix = max(data); 
data = (data-min_pix)+1; 
data = repmat(data,[1,k]); 
panjang = length(data); 
% CENTROID INITIALISE
centroid = (1:k).* max_pix/(k+1); 
iter = 0;
while(true)
    iter = iter +1;
centroid_awal = centroid; 

% CALCULATING PIXEL DISTANCE TO CENTROID
jarak = zeros(panjang, k);
for i = 1: panjang;
    jarak(i,:) = abs (data(i, :) - centroid);
end

% ENTERING PIXEL VALUE TO THE NEAREST CLUSTER
[~, maskv] = min(jarak,[],2);

%UPDATE CENTROID
for i=1:k;
    index = (maskv==i);
    centroid(:,i) = sum(data(index))/length(find(index));
end

%HENTIKAN PROSES SAAT NILAI CENTROID TIDAK BERUBAH ATAU SAAT ITERASI
%MAKSIMAL
% PROCRES WILL BE STOP IF THE CENTROID NOT CHANGE OR REACH MAXIMUL
% ITERATION

if centroid == centroid_awal | iter > max_iter
    break
end
end
seg = reshape(maskv, size(image_crop)); 

% SHOWING IMAGE OF CLUSTER RESULT
image_clus = zeros(panjang,k); 
for i=1:k
    image_clus(:,i) = (maskv==i);
end
segs = reshape(image_clus, [size(image_crop) k]);
figure()
imshow(seg, []);
title (['SEGMENTATION, k = ' num2str(k)]);
   for i = 1:k
        figure ()
        imshow(segs(:,:,i), [])
        title(['cluster -' num2str(i)])
   end
ROI= bwselect; % select ROI 
LV_KM = imfill(ROI, 'holes'); 
figure()
imshow(LV_KM, []);
title ('ROI LV K MEANS');
[y4,x4] = find(LV_KM==1); 
for j = 1:length(x4)
    signal_LV_KM(1,j) = pic(y4(j),x4(j));
end

% PREPARING K MEANS DSC
for j = 1:length(x4)
signal_DSC_LV_KM(j) = signal_LV_KM(1,j);
end
for j = 1:length(x4)
    if signal_DSC_LV_KM(j)>0;
        signal_DSC_LV_KM(j)=200;
    end
end
DSC_LV_KM = zeros(size(LV_KM)); 
for j = 1:length(x4)
    DSC_LV_KM(y4(j),x4(j)) = signal_DSC_LV_KM(j);
end

%% 2. MANUAL SEGMENTATION
%     STEP: - CLICK ON ENDOCARDIAL
%           - MAKE THE LINE UNTIL ENDOCARDIAL FORMED
%
% SELECT IMAGE
[filename, pathname] = uigetfile;
load (fullfile(pathname, filename));
[y,x]=meshgrid (1:size(pic,1), 1:size(pic,2));
figure, imshow (pic,[]); 
title ('MANUAL SEGMENTATION IMAGE')

% MAKE A CONTOUR 
[LVmanual_x,LVmanual_y] = getline(); 
LV = inpolygon(x, y, LVmanual_x,LVmanual_y);
LV=LV';
hold on;
plot (LVmanual_x,LVmanual_y,'b','LineWidth',2); 
[endo_y,endo_x] = find (LV==1);
for j = 1:length(endo_x)
    signal_LVmanual(1,j) = pic(endo_y(j),endo_x(j));
end

%
for j = 1:length(endo_x)
signal_DSC_LVmanual(j) = signal_LVmanual(1,j);
end

for j = 1:length(endo_x)
    if signal_DSC_LVmanual(j)>0;
        signal_DSC_LVmanual(j)=300;
    end
end
% PREPARING MANUAL DSC
DSC_LVmanual = zeros(size(LV)); % area DSC LV endocardium
for j = 1:length(endo_x)
    DSC_LVmanual(endo_y(j),endo_x(j)) = signal_DSC_LVmanual(j);
end

%% DICE SIMILARITY COEFFICIENT
% set overlap area 100
OverlapImage = DSC_LVmanual-DSC_LV_KM;

% count the overlap100 pixels
[r,c,v] = find(OverlapImage==100);
countOverlap100=size(r);

% count the image200 pixels
[r1,c1,v1] = find(DSC_LV_KM==200); 
com_200=size(r1);

% ount the image300 pixels
[r2,c2,v2] = find(DSC_LVmanual==300); 
com_300=size(r2);

% calculate Dice Coef
DSC = 2*countOverlap100/(com_200+com_300);

% visualize the volumes by slicing 
figure(),imshow(OverlapImage, []);colormap(pink);title('Overlapping area used to calculate DSC')
